library(tidyverse)
library(dplyr)
library(ggplot2)
library(mapview)
library(sp)
library(leaflet)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
data <- read.table('data.txt', sep = ',')
View(data)
View(data)
data <- read.table('data.txt', sep = ',')
data
class(data)
dim(data)
data <- read.table('data.txt', sep = ',')
data
class(data)
dim(data)
str(data)
data <- read.table('data.txt', sep = ',')
names(data) <- c("population","profit")
data
class(data)
dim(data)
str(data)
data <- read.table('data.txt', sep = ',')
names(data) <- c("population","profit")
data
class(data)
dim(data)
str(data)
# Construção de Camadas com ggplot2
objeto_ggplot <- ggplot(data,
aes( x = Population, y = Profit)) +
xlab('População (baseada em 10.000 habitantes)')+
ylab('Lucro (baseado em $10,000 dólares)')
# Criação de uma camada de pontos
camada_1 <- geom_point()
# Geração do gráfico a adição da camada 1
objeto_ggplot + camada_1
# Geração do gráfico a adição da camada 1
objeto_ggplot <- objeto_ggplot + camada_1
objeto_ggplot
data <- read.table('data.txt', sep = ',')
names(data) <- c("population","profit")
data
class(data)
dim(data)
str(data)
objeto_ggplot <- ggplot(data,
aes( x = population, y = profit)) +
xlab('População (* 10k inhabitants)')+
ylab('Lucro (* $10k dolares)')
camada_1 <- geom_point()
objeto_ggplot <- objeto_ggplot + camada_1
objeto_ggplot
data <- read.table('data.txt', sep = ',')
names(data) <- c("population","profit")
data
class(data)
dim(data)
str(data)
chart_1 <- ggplot(data,
aes( x = population, y = profit)) +
xlab('Population (* 10k inhabitants)')+
ylab('Profit (* $10k dolares)')
layer_1 <- geom_point()
chart_1 <- chart_1 + layer_1
chart_1
data_1 <- read.table('data.txt', sep = ',')
names(data_1) <- c("population","profit")
data_1
class(data_1)
dim(data_1)
str(data_1)
chart_1 <- ggplot(data_1,
aes( x = population, y = profit)) +
xlab('Population (* 10k inhabitants)')+
ylab('Profit (* $10k dolares)')
layer_1 <- geom_point()
chart_1 <- chart_1 + layer_1
chart_1
model_1 <- lm(profit ~ population, data = data_1)
model_1
model_1 <- lm(profit ~ population, data = data_1)
model_1
names(model_1)
model_1 <- lm(profit ~ population, data = data_1)
model_1
names(model_1)
# Coeficientes
model_1$coefficients[1]
model_1$coefficients[2]
# Resíduos do modelo (diferença entre o modelo e os dados de treinamento)
model_1$residuals
model_1 <- lm(profit ~ population, data = data_1)
model_1
names(model_1)
# Coeficientes
model_1$coefficients[1]
model_1$coefficients[2]
# Resíduos do modelo (diferença entre o modelo e os dados de treinamento)
model_1$residuals
# Obtenha a média dos resíduos
media_residuos = mean(modelo_ML$residuals)
# Obtenha a média dos resíduos
mean_residuals = mean(model_1$residuals)
mean_residuals
# Obtenha a média dos resíduos
mean_residuals = mean(model_1$residuals)
mean_residuals
# Gerando predições
?predict
previsao_treinamento = predict(model_1)
class(previsao_treinamento)
previsao_treinamento = as.data.frame(previsao_treinamento)
View(previsao_treinamento)
class(previsao_treinamento)
library(tidyverse)
library(dplyr)
library(ggplot2)
library(mapview)
library(sp)
library(leaflet)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
data_1 <- read.table('data.txt', sep = ',')
names(data_1) <- c("population","profit")
data_1
class(data_1)
dim(data_1)
str(data_1)
chart_1 <- ggplot(data_1,
aes( x = population, y = profit)) +
xlab('Population (* 10k inhabitants)')+
ylab('Profit (* $10k dolares)')
layer_1 <- geom_point()
chart_1 <- chart_1 + layer_1
chart_1
model_1 <- lm(profit ~ population, data = data_1)
model_1
names(model_1)
# Coeficientes
model_1$coefficients[1]
model_1$coefficients[2]
# Resíduos do modelo (diferença entre o modelo e os dados de treinamento)
model_1$residuals
# Obtenha a média dos resíduos
mean_residuals = mean(model_1$residuals)
mean_residuals
# Gerando predições
?predict
previsao_treinamento = predict(model_1)
class(previsao_treinamento)
previsao_treinamento = as.data.frame(previsao_treinamento)
View(previsao_treinamento)
class(previsao_treinamento)
novo_dado      = data.frame(c(10, 12, 14, 16, 18, 20))
colnames(novo_dado) <- c('Population')
novo_dado
predicao_teste <- predict(modelo_ML, novo_dado)
predicao_teste <- predict(model_1, novo_dado)
novo_dado      = data.frame(c(10, 12, 14, 16, 18, 20))
colnames(novo_dado) <- c('population')
novo_dado
predicao_teste <- predict(model_1, novo_dado)
predicao_teste <- data.frame(predicao_teste*10000)
names(predicao_teste) <- c('Predições (dólares)')
predicao_teste
# 10 * 10k = 100.000 hqbitantes
novo_dado      = data.frame(c(10))
colnames(novo_dado) <- c('population')
novo_dado
predicao_teste <- predict(model_1, novo_dado)
predicao_teste <- data.frame(predicao_teste*10000)
names(predicao_teste) <- c('Predições (dólares)')
predicao_teste
theta0 = 0
theta1 = 0
theta  = c(theta0,theta1)
# Criando funções
Cost_computation <- function(x, y, theta){
# Verificação do número de exemplos de treinamento
m = length(y)
# Inicialização do Custo
J = 0
# Cômputo do custo a partir das informações fornecidas:
# i)   matriz de design
# ii)  rótulos ou respostas
# iii) parâmetros inicializados
# Parâmetros - de acordo com o modelo de regressão linear
Theta0 = theta[1]
Theta1 = theta[2]
# Função hipótese candidata de acordo com o modelo linear
h = Theta0 + Theta1*x
# Cômputo do custo (repare na versão vetorizada com Matlab)
Cost = sum((h - y)^2)
# Ponderação do custo pela quantidade de exemplos de treinamento
J = (1/(2*m))*Cost
}
# Cálculo da função custo para esses valores do vetor de parâmetros theta
Custo = Cost_computation(x,y,theta)
# Cálculo da função custo para esses valores do vetor de parâmetros theta
Custo = Cost_computation(10,10,theta)
Custo
theta0 = 0
theta1 = 0
theta  = c(theta0,theta1)
# Criando funções
Cost_computation <- function(x, y, theta){
# Verificação do número de exemplos de treinamento
m = length(y)
# Inicialização do Custo
J = 0
# Cômputo do custo a partir das informações fornecidas:
# i)   matriz de design
# ii)  rótulos ou respostas
# iii) parâmetros inicializados
# Parâmetros - de acordo com o modelo de regressão linear
Theta0 = theta[1]
Theta1 = theta[2]
# Função hipótese candidata de acordo com o modelo linear
h = Theta0 + Theta1*x
# Cômputo do custo (repare na versão vetorizada com Matlab)
Cost = sum((h - y)^2)
# Ponderação do custo pela quantidade de exemplos de treinamento
J = (1/(2*m))*Cost
}
# Cálculo da função custo para esses valores do vetor de parâmetros theta
Custo = Cost_computation(10,10,theta)
Custo
# -----------------------------------------------------------------------------------------------
# Algoritmo do Gradiente Descendente ------------------------------------------------------------
# Inicializações relacionada ao gradiente descendente
num_iters     = 15000;
learning_rate = 0.01;
Algoritmo_GD <- function(X, y, theta, learning_rate, num_iters){
# Verificação do número de exemplos de treinamento
m = length(y)
# Uso da variável alpha = taxa de aprendizagem
alpha = learning_rate
# Loop para iterações do algoritmo GD
for (i in 1:num_iters){
# ================================================================================
h      = theta[1] + theta[2]*x                   # Função hipótese
Theta0 = theta[1]                                # Parâmetro (bias)
Theta1 = theta[2]                                # Parâmetro da característica
Theta0 = Theta0 - alpha*(1/m)*sum((h - y))       # Algoritmo GD (theta 0)
Theta1 = Theta1 - alpha*(1/m)*sum((h - y)*x)     # Algoritmo GD (theta 1)
theta  = c(Theta0, Theta1)                       # Composição de vetor de parâmetro
# print(theta)
}
# ================================================================================
theta
}
theta_GD <- Algoritmo_GD(x, y, theta, learning_rate, num_iters)
theta_GD <- Algoritmo_GD(10, 10, theta, learning_rate, num_iters)
theta_GD <- Algoritmo_GD(10, 10, theta, learning_rate, num_iters)
# Característica unitária
size_data = dim(data)
ones_data = replicate(size_data[1],1)
# Matriz de Design
X = data.frame(ones_data,x)
